using iText.Bouncycastle.Crypto;
namespace ResumeBuilderApp
{
    public class ResumeBuilder
    {
        private Resume _resume = new Resume(); //instantiate Resume class privately
        protected string? title = "\nWelcome to the Resume Builder\n";
        protected string? choice;
        protected string currentUser = ""; //store logged in user temporarily
        protected bool authStatus = false;
        protected string? LoggedIn;
        private string resumeType;
        bool isRunning = true; // Flag to control the loop

        public void Start()
        {
            while (isRunning)
            {
            Start:
                Console.ForegroundColor = ConsoleColor.Blue; // Set text color to green
                Console.WriteLine(title);
                Console.ResetColor();

                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("\n1. Login");
                Console.WriteLine("\n2. Register");
                Console.WriteLine("\n3. Exit");
                Console.ForegroundColor = ConsoleColor.Green;
                Console.Write("Choice: ");
                choice = Console.ReadLine(); Console.ResetColor();

                switch (choice)
                {
                    case "1":
                        authStatus = Login();
                        if (authStatus && LoggedIn != "admin") //log in the user
                        {
                                MainMenu(); //Go to main menu
                        }
                        break;
                    case "2":
                        Console.Clear();
                        Register();
                        goto Start;
                    case "3":
                        Console.Clear();
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Exiting program..."); Console.ResetColor();
                        isRunning = false; // Exit the loop
                        break;
                    default:
                        Console.Clear();
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("\nInvalid option. Please choose again.\n"); Console.ResetColor();
                        goto Start;
                }
            }

            Environment.Exit(0); // Ensure the program exits completely
        }

        private void MainMenu()
        {
        begin:
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("\t\t\t     Main Menu");
            Console.WriteLine("=============================================================================="); Console.ResetColor();
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("1. Build Resume");
            Console.WriteLine("2. Edit Existing Resume (Must be generated by this program before)");
            Console.WriteLine("3. Delete Existing Resumes");
            Console.WriteLine("4. Logout");
            Console.WriteLine("5. Exit");

            Console.ResetColor();

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("=============================================================================="); Console.ResetColor();

            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.Write("\nChoice: ");
            choice = Console.ReadLine(); Console.ResetColor();

            try
            {
                switch (choice)
                {
                    case "1":
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        _BuildNewResume();
                        Console.ResetColor();
                        goto begin;
                    case "2":
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        _EditExistingResume();
                        Console.ResetColor();
                        goto begin;
                    case "3":
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        FileHandler.DeleteFile(currentUser);
                        Console.ResetColor();
                        goto begin;
                    case "4":
                        Console.Clear();
                        currentUser = "";
                        authStatus = false;
                        isRunning = true;
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("\nLogging out......"); Console.ResetColor();
                        return;
                    case "5":
                        Console.Clear();
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("\nExiting Resume Builder..."); Console.ResetColor();
                        isRunning = false;
                        break;
                    default:
                        Console.Clear();
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Invalid option. Please choose again."); Console.ResetColor();
                        goto begin;
                }
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("\nError caught: " + ex.Message);
                Console.ResetColor();
            }
        }

        protected bool Login()
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("Login Required\n");
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("Type ('forgot') if you have forgotten your password\n");
            Console.ForegroundColor = ConsoleColor.Yellow;

            Console.Write("Enter Username: ");
            FileHandler.Username = Console.ReadLine();

            Console.Write("Enter Password: ");
            FileHandler.Password = Console.ReadLine();

            Console.Clear();
            if (FileHandler.Password == "forgot")
            {
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Blue;
                Console.WriteLine("\neAccount Recovery | Password Change Request to Admin\n");
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("==============================================================================");

                FileHandler.RequestPassChange(FileHandler.Username, FileHandler.Password);
                Console.Write("Press any key to continue");
                Console.ReadKey();
                Console.Clear();
                return false;
            }

            LoggedIn = FileHandler.Login(FileHandler.Username, FileHandler.Password);

            AdminMenu admin = new AdminMenu();

            if (LoggedIn != null)
            {
                currentUser = FileHandler.Username;
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"\nLogin successful. Welcome, {currentUser}!");
                Console.WriteLine($"Account Role: {LoggedIn}");
                Console.ResetColor();

                // Direct admin users to the admin menu
                if (LoggedIn == "admin")
                {
                    AdminMenu adminMenu = new AdminMenu();
                    adminMenu.ShowAdminMenu(); // You will define ShowAdminMenu in AdminMenu class
                }
                return true;
            }

            else
            {
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Invalid credentials. Please try again."); Console.ResetColor();
                return false;
            }
        }

        private void Register()
        {
        register:
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("Register New Account");

            Console.Write("Enter a new username: ");
            FileHandler.Username = Console.ReadLine();

            Console.Write("Enter a new password: ");
            FileHandler.Password = Console.ReadLine();

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.Write("What is your role? (type admin or user): ");
            string? role = Console.ReadLine();
            Console.ResetColor();

            if (role?.ToLower() != "admin" && role?.ToLower() != "user")
            {
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("\nInvalid input. Try again please!\n"); Console.ResetColor();
                goto register;
            }


            bool isRegistered = FileHandler.RegisterUser(FileHandler.Username, FileHandler.Password, role.ToLower());
            if (isRegistered)
            {
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine("\nRegistration successful! You can now log in.\n"); Console.ResetColor();
                return;
            }
            else
            {
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Username already exists. Please try a different username. and try again"); Console.ResetColor();
                goto register;
            }

        }

        protected void _BuildNewResume() //For generating a new resume from scratch
        {
            Console.Clear();
            Console.WriteLine("Collecting Resume Data....Yipee\n");

            _resume = new Resume();

            CategorySelector categorySelector;
            categorySelector = new CategorySelector();
            ResumeCategory selectedCategory = categorySelector.SelectCategory();

            switch (selectedCategory)
            {
                case ResumeCategory.Engineering:
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    Console.WriteLine("\nYou selected Engineering.\n\nPress any key to continue\n");
                    Console.ReadKey();
                    _resume = new EngineeringResume();

                    // call methods specific to EngineeringResume
                    if (_resume is EngineeringResume engineeringResume)
                    {
                        engineeringResume.CollectEngineeringData();  
                    }

                    break;

                case ResumeCategory.BPO:
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    Console.WriteLine("\nYou selected BPO.\n\nPress any key to continue\n");
                    Console.ReadKey();
                    _resume = new BPOResume(); // Assign BPOResume data

                    // call methods specific to BPO Resume
                    if (_resume is BPOResume bpoResume) 
                    {
                        bpoResume.CollectBPOData();
                    }
                    break;
                case ResumeCategory.Medical:
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    Console.WriteLine("\nYou selected Medical Resume.\n\nPress any key to continue\n");
                    Console.ReadKey();
                    _resume = new MedicalResume(); // Assign BPOResume data
                    if (_resume is MedicalResume medResume)
                    {
                        medResume.CollectMedicalData();
                    }
                    break;
            }

            Console.ForegroundColor = ConsoleColor.Cyan;
            _ExportAndEdit();
        }

       protected void _EditExistingResume() //editing existing resume
        {
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"User: {currentUser}");
            Console.WriteLine("Loading existing resume....\n"); Console.ForegroundColor = ConsoleColor.Yellow;

            //Retrieve list of resume files for the user
            List<string> resumeFiles = FileHandler.GetUserResumes(currentUser);

            if (resumeFiles.Count > 0)
            {
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine($"\nResumes for {currentUser}:\n"); Console.ResetColor();
                Console.ForegroundColor = ConsoleColor.Cyan;
                foreach (string resume in resumeFiles)
                {
                    Console.WriteLine($"- {resume}");
                }
                Console.ResetColor();
            }

            Console.ForegroundColor = ConsoleColor.Yellow;
            _resume = FileHandler.LoadFromTxtFile(currentUser);
            if (_resume == null) //checks if the FileHandler returns null or not
            {Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("\nCould not load resume.Returning to main menu....\n"); Console.ResetColor();
                return;
            }


            Console.ReadKey();
            Console.WriteLine();

            _ExportAndEdit();
        }

       protected void _ExportAndEdit()
        {
            Console.Clear();
            Console.WriteLine(title);
          
            choices:
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("|Current Resume Data|"); Console.ResetColor();
                _DisplayResume(); // Display the collected information
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("What would you like to do?");
                Console.WriteLine("1. Edit a section");
                Console.WriteLine("2. Export Current Generated Resume");
                Console.WriteLine("3. Exit");
                Console.Write("Choice: ");
                choice = Console.ReadLine();
                Console.ResetColor();
                switch (choice)
                {
                    case "1":
                        try
                        {
                            Console.ForegroundColor = ConsoleColor.Yellow;
                            _EditSection();
                            Console.ResetColor();
                        }
                        catch (Exception ex)
                        {
                            Console.ForegroundColor = ConsoleColor.DarkRed;
                            Console.WriteLine("\nError caught: " + ex.Message); Console.ResetColor(); goto choices; 
                        }
                        goto choices;
                    case "2":
                        Console.Clear();
                        Console.ForegroundColor = ConsoleColor.Blue;
                        Console.WriteLine(title); Console.ResetColor();
                        Console.ForegroundColor = ConsoleColor.Cyan;

                        // Call the SaveResume method to save in both PDF and text format
                        FileHandler.SaveResume(_resume, currentUser);
                        Console.ResetColor();
                        isRunning = false;
                        break;
                    case "3":
                        Console.Clear();
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("\nReturning to Main Menu....."); Console.ResetColor();
                        return;
                    default
                        Console.Clear();
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Invalid option. Please choose again."); Console.ResetColor();
                        goto choices;

                }
            }

       protected void _EditSection()
        {
            Console.Clear();

        editChoices:
            Console.Clear();
            resumeType = FileHandler.typeResume(currentUser);
            if (resumeType == "Engineering")
            {
                Console.Clear();

                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("==============================");
                Console.WriteLine("    ENGINEERING INFORMATION");
                Console.WriteLine("==============================\n");
                Console.ResetColor();

                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Select the section you want to edit:");
                Console.ResetColor();
                Console.WriteLine("1. Personal Information");
                Console.WriteLine("2. Work Experience");
                Console.WriteLine("3. Education");
                Console.WriteLine("4. Skills");
                Console.WriteLine("5. Custom Sections");

                int choice = int.Parse(Console.ReadLine());

                EngineeringResume engineeringResume = new EngineeringResume();
                switch (choice)
                {
                    case 1:
                        engineeringResume.PersonalInfo.CollectData();
                        break;
                    case 2:
                        engineeringResume.WorkExperience.CollectData();
                        break;
                    case 3:
                        engineeringResume.Education.CollectData();
                        break;
                    case 4:
                        engineeringResume.Skills.CollectData();
                        break;
                    case 5:
                        engineeringResume.AddCustomSection(new Projects());
                        engineeringResume.AddCustomSection(new Certifications());
                        engineeringResume.AddCustomSection(new Courses());
                        engineeringResume.AddCustomSection(new CharacterReferences());
                        break;
                    default:
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Invalid choice. Please try again.");
                        Console.ResetColor();
                        goto editChoices;
                }
            }
            else if (resumeType == "BPO")
            {
                Console.Clear();

                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("==============================");
                Console.WriteLine("    BPO INFORMATION");
                Console.WriteLine("==============================\n");
                Console.ResetColor();

                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Select the section you want to edit:");
                Console.ResetColor();
                Console.WriteLine("1. Personal Information");
                Console.WriteLine("2. Work Experience");
                Console.WriteLine("3. Education");
                Console.WriteLine("4. Skills");
                Console.WriteLine("5. Custom Sections");

                int choice = int.Parse(Console.ReadLine());

                var bpoResume = new BPOResume();
                switch (choice)
                {
                    case 1:
                        bpoResume.PersonalInfo.CollectData();
                        break;
                    case 2:
                        bpoResume.WorkExperience.CollectData();
                        break;
                    case 3:
                        bpoResume.Education.CollectData();
                        break;
                    case 4:
                        bpoResume.Skills.CollectData();
                        break;
                    case 5:
                        bpoResume.AddCustomSection(new BPOVolunteerExperiences());
                        bpoResume.AddCustomSection(new Languages());
                        bpoResume.AddCustomSection(new Interests());
                        break;
                    default:
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Invalid choice. Please try again.");
                        Console.ResetColor();
                        break;
                }
            }
            else if (resumeType == "Medical")
            {
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine("==============================");
                Console.WriteLine("    MEDICAL INFORMATION");
                Console.WriteLine("==============================\n");
                Console.ForegroundColor = ConsoleColor.Yellow;

                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine("Select the section you want to edit:");
                Console.ResetColor();
                Console.WriteLine("1. Personal Information");
                Console.WriteLine("2. Work Experience");
                Console.WriteLine("3. Education");
                Console.WriteLine("4. Skills");
                Console.WriteLine("5. Custom Sections");

                int choice = int.Parse(Console.ReadLine());

                var medsume = new MedicalResume();
                switch (choice)
                {
                    case 1:
                        medsume.PersonalInfo.CollectData();
                        break;
                    case 2:
                        medsume.WorkExperience.CollectData();
                        break;
                    case 3:
                        medsume.Education.CollectData();
                        break;
                    case 4:
                        medsume.Skills.CollectData();
                        break;
                    case 5:
                        medsume.AddCustomSection(new License());
                        medsume.AddCustomSection(new MedicalExperience());
                        medsume.AddCustomSection(new Certificates());
                        break;
                    default:
                        Console.ForegroundColor = ConsoleColor.Red;
                        Console.WriteLine("Invalid choice. Please try again.");
                        Console.ResetColor();
                        break;
                }
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Unknown resume type. Please verify the user's resume type.");
                Console.ResetColor();
                goto editChoices;
            }
        }

        protected void _DisplayResume()
        {
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine();
            Console.WriteLine(_resume);
            Console.ResetColor();
        }
	}
}